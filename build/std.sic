strings.newline -> {
    print("|-");
}

strings.println -> {
    print(args.0);
    newline();
}


math.smaller -> {
    i1 -> get(args, "0");
    i2 -> get(args, "1");
    return(larger(i2, i1));
}

math.substract -> {
    i1 -> get(args, "0");
    i2 -> get(args, "1");
    return(add(i1, neg(i2)));
}

thread.doUntil -> {
    until -> get(args, "0");
    doer -> get(args, "1");
    argsUntil -> get(args, "2");
    until_i -> 0;
    loop(doUntilP);
}

thread.doUntilP -> {
    doer(argsUntil);
    until_i = add(until_i, 1);
    if(eq(until_i, until), break);
}

load(strings);
load(math);

strings.ifteAddToBuffer -> {
    buffer -> add(buffer, toAdd);
}

strings.ifteSetStart -> {
    started -> true;
}

strings.ifteP -> {
    char -> indexString(indexed, index);
    index -> add(index, 1);
    // print("char: ");
    // print(char);
    // newline();
    // print("start: ");
    // print(start);
    // newline();
    if(eq(char, start), strings.ifteSetStart);
    toAdd -> char;
    if(started, strings.ifteAddToBuffer);
    if(eq(char, end), break);
}

strings.ifte -> {
    indexed -> args.0;
    start -> args.1;
    end -> args.2;
    started -> false;
    index -> 0;
    buffer -> "";
    loop(strings.ifteP);
    return(buffer);
}



